// Code generated by mockery v2.46.3. DO NOT EDIT.

package daomocks

import (
	context "context"

	dao "github.com/a-novel/uservice-credentials/pkg/dao"
	entities "github.com/a-novel/uservice-credentials/pkg/entities"

	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// MockCreateCredentials is an autogenerated mock type for the CreateCredentials type
type MockCreateCredentials struct {
	mock.Mock
}

type MockCreateCredentials_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCreateCredentials) EXPECT() *MockCreateCredentials_Expecter {
	return &MockCreateCredentials_Expecter{mock: &_m.Mock}
}

// Exec provides a mock function with given fields: ctx, id, now, request
func (_m *MockCreateCredentials) Exec(ctx context.Context, id uuid.UUID, now time.Time, request *dao.CreateCredentialsRequest) (*entities.Credential, error) {
	ret := _m.Called(ctx, id, now, request)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 *entities.Credential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, *dao.CreateCredentialsRequest) (*entities.Credential, error)); ok {
		return rf(ctx, id, now, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, *dao.CreateCredentialsRequest) *entities.Credential); ok {
		r0 = rf(ctx, id, now, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Credential)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time, *dao.CreateCredentialsRequest) error); ok {
		r1 = rf(ctx, id, now, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCreateCredentials_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockCreateCredentials_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - now time.Time
//   - request *dao.CreateCredentialsRequest
func (_e *MockCreateCredentials_Expecter) Exec(ctx interface{}, id interface{}, now interface{}, request interface{}) *MockCreateCredentials_Exec_Call {
	return &MockCreateCredentials_Exec_Call{Call: _e.mock.On("Exec", ctx, id, now, request)}
}

func (_c *MockCreateCredentials_Exec_Call) Run(run func(ctx context.Context, id uuid.UUID, now time.Time, request *dao.CreateCredentialsRequest)) *MockCreateCredentials_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(time.Time), args[3].(*dao.CreateCredentialsRequest))
	})
	return _c
}

func (_c *MockCreateCredentials_Exec_Call) Return(_a0 *entities.Credential, _a1 error) *MockCreateCredentials_Exec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCreateCredentials_Exec_Call) RunAndReturn(run func(context.Context, uuid.UUID, time.Time, *dao.CreateCredentialsRequest) (*entities.Credential, error)) *MockCreateCredentials_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCreateCredentials creates a new instance of MockCreateCredentials. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCreateCredentials(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCreateCredentials {
	mock := &MockCreateCredentials{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
